#!/usr/bin/env bash

set -eu

# Supported languages
declare -A LANGS
LANGS["asm"]="asm"
LANGS["bash"]="bash"
LANGS["c"]="c"
LANGS["python"]="py"

###############################################
#   VERSION INFORMATION                       #
###############################################

usage() {
    echo "Usage: $(basename $0) LANG"
    echo
    echo "Update the repository README to get the number of solves"
    echo "for the supported languages."
    echo
    echo "LANGUAGES"
    echo "    asm, bash, c, python"
    echo
    echo "OPTIONS"
    echo "    -h        Display this help message."
    echo "    -v        Verbose output."
    echo
    exit 0
}

###############################################
#   LOGGERS                                   #
###############################################

fatal() {
    echo -e "[\033[31m-\033[0m] FATAL: $1" >&2
    exit 1
}

debug() {
    (($DEBUG == 1)) || return 0
    echo -e "[\033[32m+\033[0m] $1" >&2
}

###############################################
#   MAIN METHODS                              #
###############################################

check-lang() {
    local lang="$1"
    shopt -s globstar nullglob

    # Get the file count
    local -a files=(src/**/main."${LANGS[$lang]}")
    debug "found: ${files[@]}"
    local count="${#files[@]}"

    local sp='[[:space:]]*'
    local digit='[[:digit:]]+'
    local regex="^(${sp}\|${sp}${lang}${sp}\|${sp})${digit}(${sp}\|)$"

    # Replace the README contents
    [[ -f 'README.md' ]] || fatal "missing README!"
    sed -i -E "s/${regex}/\1${count}\2/I" README.md
}

main() {
    local -a positional
    declare -g DEBUG=0

    # Use get-root if possible
    if command -v get-root >/dev/null 2>&1; then
        cd $(get-root)
    else
        local root=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
        cd "$(dirname "$root")"
    fi

    # Drain flags
    while (($# > 0)); do
        case "$1" in
            -h | --help) usage ;;
            -v | --verbose) DEBUG=1 ;;
            -* | --*) fatal "unknown argument: $1" ;;
            *) positional+=("$1") ;;
        esac
        shift
    done

    (($# > 1)) && fatal "too many arguments!"

    # Get the scope
    local -a scope
    if (($# == 0)); then
        scope=("${!LANGS[@]}")
    else
        scope=("$1")
    fi

    # Update the langs in scope
    for item in "${scope[@]}"; do
        debug "updating: $item"
        check-lang "$item"
    done

    # Format the README if we got here
    debug "formatting README"
    npx prettier --write README.md >/dev/null 2>&1
}

main "$@"
